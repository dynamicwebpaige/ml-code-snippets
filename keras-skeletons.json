{
/*
	// ===================================
	// Keras Examples
	// ===================================
*/

	"Keras Sequence: Addition RNN": {
	"prefix": "Keras Sequence: Addition RNN",
	"body": [
	],
	"description": "An implementation of sequence to sequence learning for performing addition."
	},

	"Keras Vision: MNIST Multi-Layer Perceptron (MLP)":{
		"prefix": "Keras Vision: MNIST Multi-Layer Perceptron (MLP)",
		"body": [
	],
		"description": "Trains a simple deep multi-layer perceptron on the MNIST dataset."	
	},

	"Keras Vision: MNIST CNN": {
		"prefix": "Keras Vision: MNIST CNN",
		"body": [
	],
		"description": "Trains a simple convnet on the MNIST dataset."
	},

	"Keras Vision: CIFAR10 CNN": {
	"prefix": "Keras Vision: CIFAR10 CNN",
	"body": [
	],
	"description": "Trains a simple deep CNN on the CIFAR10 small images dataset."
	},

	"Keras Vision: CIFAR10 ResNet": {
	"prefix": "Keras Vision: CIFAR10 ResNet",
	"body": [
	],
	"description": "Trains a ResNet on the CIFAR10 small images dataset."
	},

	"Keras Vision: Convolutional LSTM": {
		"prefix": "Keras Vision: Convolutional LSTM",
		"body": [
	],
		"description": "Demonstrates the use of a convolutional LSTM network."
	},

	"Keras Vision: Image OCR": {
		"prefix": "Keras Vision: Image OCR",
		"body": [
	],
		"description": "Trains a convolutional stack followed by a recurrent stack and a CTC logloss to perform optical character recognition (OCR)."
	},

	"Keras Vision: MNIST Auxiliary Classifier GAN (AC-GAN)": {
		"prefix": "Keras Vision: MNIST Auxiliary Classifier GAN (AC-GAN)",
		"body": [
	],
		"description": "Implementation of AC-GAN (Auxiliary Classifier GAN) on the MNIST dataset."
	},

	"Keras Vision: MNIST Hierarchical RNN (HRNN)": {
		"prefix": "Keras Vision: MNIST Hierarchical RNN (HRNN)",
		"body": [
	],
		"description": "Trains a Hierarchical RNN (HRNN) to classify MNIST digits."
	},

	"Keras Vision: MNIST Siamese MLP": {
	"prefix": "Keras Vision: MNIST Siamese MLP",
	"body": [
	],
	"description": "Trains a Siamese multi-layer perceptron on pairs of digits from the MNIST dataset."
	}
	
	
	"Keras Vision: MNIST Stacked What-Where AutoEncoder (SWWAE)": {
	"prefix": "Keras Vision: MNIST Stacked What-Where AutoEncoder (SWWAE)",
	"body": [
	],
	"description": "Trains a Stacked What-Where AutoEncoder built on residual blocks on the MNIST dataset."
	}

	"Keras Vision: MNIST Transfer Learning CNN": {
	"prefix": "Keras Vision: MNIST Transfer Learning CNN",
	"body": [
	],
	"description": "Toy example; transfer learning using a convolutional neural network on the MNIST dataset."
	}
}
