{
/*
	// ===================================
	// Machine Learning - Code Snippets
	// ===================================
*/

	"Neural Net": {
	"prefix": "Neural Net",
	"body": [
		"library(neuralnet)",
		"",
		"# ==================",
		"# BUILDING A MODEL",
		"# ==================",
		"m <- neuralnet(target ~ predictors, data = data, hidden = 1)",
		"",
		"# target = outcome in the 'data' frame to be modeled",
		"# predictors = R formula specifying features in 'data' to be used for prediction",
		"# data = data frame containing 'target' and 'predictors'",
		"# hidden = specifies the number of neurons in the hidden layer",
		"",
		"# ====================",
		"# MAKING PREDICTIONS  ",
		"# ====================",
		"p <- compute(m, test)",
		"",
		"# m = trained neuralnet() model - see above",
		"# test = data frame comprised of same features as training model",
		"",
		"# ======================",
		"# VALIDATING THE MODEL",
		"# ======================"
	],
	"description": "Implements an artificial neural network."
	},

	"Market Basket":{
		"prefix": "Market Basket",
		"body": [
		"library(arules)",
		"",
		"# =======================",
		"# FIND ASSOCIATION RULES",
		"# =======================",
		"myrules <- apriori(data = mydata, parameter = )",
		"      list(support = 0.1, confidence = 0.8, minlen = 1))",
		"",
		"# data = sparse item matrix holding transactional data",
		"# support = minimum required rule support",
		"# confidence = minimum required rule confidence",
		"# minlen = minimum required rule items",
		"",
		"# ==========================",
		"# EXAMINE ASSOCIATION RULES",
		"# ==========================",
		"inspect(myrules)",
		"",
		"# myrules = set of association rules using apriori() - see above",
		"",
		"# ======================",
		"# VALIDATING THE MODEL",
		"# ======================"
	],
		"description": "Implements market basket analysis using the apriori algorithm."	
	},

	"Naive Bayes": {
		"prefix": "Naive Bayes",
		"body": [
		"library(e1071)",
		"",
		"# ======================",
		"# BUILDING A CLASSIFIER",
		"# ======================",
		"m <- naiveBayes(train, class, laplace = 0)",
		"",
		"# train = either a matrix or data frame with training data",
		"# class = factor vector with the class for each row in the training data",
		"# laplace = number to control the Laplace estimator",
		"",
		"# ====================",
		"# MAKING PREDICTIONS  ",
		"# ====================",
		"p <- predict(m, test, type = 'class')",
		"",
		"# m = trained naiveBayes() model - see above",
		"# test = data frame comprised of same features as training model",
		"type = either 'class' or 'raw'; specifies whether the predictions should be",
		"      most likely class value or raw predicted probabilities",
		"",
		"# ======================",
		"# VALIDATING THE MODEL",
		"# ======================"
	],
		"description": "Implementation of the Naive Bayes algorithm using the e1071 package."
	},

	"Decision Tree": {
	"prefix": "Decision Tree",
	"body": [
		"library(C50)",
		"",
		"# ==================",
		"# BUILDING A MODEL",
		"# ==================",
		"m <- C5.0(train, class, trials = 1, costs = NULL)",
		"",
		"# train = data frame containing the training data",
		"# class = factor vector for each row in the training data",
		"# trials = optional number to increase boosting iterations",
		"# costs = optional matrix specifying costs for errors",
		"",
		"# ====================",
		"# MAKING PREDICTIONS  ",
		"# ====================",
		"p <- predict(m, test, type = 'class')",
		"",
		"# m = trained C5.0() model - see above",
		"# test = data frame comprised of same features as training model",
		"type = either 'class' or 'prob'; specifies whether predictions should be most probable class, or raw predicted probabilities",
		"",
		"# ======================",
		"# VALIDATING THE MODEL",
		"# ======================"
	],
	"description": "Implements a C5.0 decision tree model using the 'C50' package."
	}

}